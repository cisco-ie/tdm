user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    root /srv;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    #sendfile on;
    #tcp_nopush on;
    keepalive_timeout 70;
    #gzip on;

    # SSL for HTTPS
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_certificate /run/secrets/tdm.cisco.com.crt;
    ssl_certificate_key /run/secrets/tdm.cisco.com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_stapling on;
    ssl_stapling_verify on;
    #add_header Strict-Transport-Security "max-age=31536000";

    # Docker embedded DNS resolver
    resolver 127.0.0.11 valid=30s;

    # Proxy HTTPS->HTTP
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Client-Verify SUCCESS;
    proxy_set_header X-Client-DN $ssl_client_s_dn;
    proxy_set_header X-SSL-Subject $ssl_client_s_dn;
    proxy_set_header X-SSL-Issuer $ssl_client_i_dn;
    proxy_read_timeout 1800;
    proxy_connect_timeout 1800;

    server {
        listen 443 ssl http2;
        server_name tdm.cisco.com;
        # Need a separate log because access.log is a softlink to /dev/stdout
        access_log /var/log/nginx/access_web.log main;

        set $upstream_web http://web:80;
        location / {
            proxy_pass $upstream_web;
        }

        location /doc/ {
            sendfile on;
            alias /srv/doc/;
        }

        location /goaccess_web.html {
            sendfile on;
            alias /srv/goaccess/web.html;
        }

        location /goaccess_dbms.html {
            sendfile on;
            alias /srv/goaccess/dbms.html;
        }

        location /goaccess_kibana.html {
            sendfile on;
            alias /srv/goaccess/kibana.html;
        }
    }

    server {
        listen 80;
        server_name tdm.cisco.com;
        # Ideally use $server_name instead of $host, breaks dev redirection though.
        return 301 https://$host$request_uri;
    }

    server {
        listen 8529 ssl http2;
        server_name tdm.cisco.com;
        # Need a separate log because access.log is a softlink to /dev/stdout
        access_log /var/log/nginx/access_dbms.log main;

        set $upstream_dbms http://dbms:8529;
        location / {
            proxy_pass $upstream_dbms;
        }
    }

    server {
        listen 5601;
        server_name tdm.cisco.com;
        # Need a separate log because access.log is a softlink to /dev/stdout
        access_log /var/log/nginx/access_kibana.log main;

        set $upstream_kibana http://kibana:5601;
        location / {
            proxy_pass $upstream_kibana;
        }
    }
}
